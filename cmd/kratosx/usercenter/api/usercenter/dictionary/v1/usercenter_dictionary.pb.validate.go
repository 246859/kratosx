// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: usercenter_dictionary.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetDictionaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDictionaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictionaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictionaryRequestMultiError, or nil if none found.
func (m *GetDictionaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictionaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Params.(type) {
	case *GetDictionaryRequest_Id:
		if v == nil {
			err := GetDictionaryRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetId() < 1 {
			err := GetDictionaryRequestValidationError{
				field:  "Id",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetDictionaryRequest_BinaryAndKeyword_:
		if v == nil {
			err := GetDictionaryRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBinaryAndKeyword()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDictionaryRequestValidationError{
						field:  "BinaryAndKeyword",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDictionaryRequestValidationError{
						field:  "BinaryAndKeyword",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBinaryAndKeyword()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDictionaryRequestValidationError{
					field:  "BinaryAndKeyword",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetDictionaryRequestMultiError(errors)
	}

	return nil
}

// GetDictionaryRequestMultiError is an error wrapping multiple validation
// errors returned by GetDictionaryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDictionaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictionaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictionaryRequestMultiError) AllErrors() []error { return m }

// GetDictionaryRequestValidationError is the validation error returned by
// GetDictionaryRequest.Validate if the designated constraints aren't met.
type GetDictionaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictionaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictionaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictionaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictionaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictionaryRequestValidationError) ErrorName() string {
	return "GetDictionaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictionaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictionaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictionaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictionaryRequestValidationError{}

// Validate checks the field values on GetDictionaryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDictionaryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictionaryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictionaryReplyMultiError, or nil if none found.
func (m *GetDictionaryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictionaryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetUserId() < 1 {
		err := GetDictionaryReplyValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := GetDictionaryReplyValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBinary()) < 1 {
		err := GetDictionaryReplyValidationError{
			field:  "Binary",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDictionaryReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDictionaryReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDictionaryReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return GetDictionaryReplyMultiError(errors)
	}

	return nil
}

// GetDictionaryReplyMultiError is an error wrapping multiple validation errors
// returned by GetDictionaryReply.ValidateAll() if the designated constraints
// aren't met.
type GetDictionaryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictionaryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictionaryReplyMultiError) AllErrors() []error { return m }

// GetDictionaryReplyValidationError is the validation error returned by
// GetDictionaryReply.Validate if the designated constraints aren't met.
type GetDictionaryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictionaryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictionaryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictionaryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictionaryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictionaryReplyValidationError) ErrorName() string {
	return "GetDictionaryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictionaryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictionaryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictionaryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictionaryReplyValidationError{}

// Validate checks the field values on ListDictionaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDictionaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictionaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictionaryRequestMultiError, or nil if none found.
func (m *ListDictionaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictionaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListDictionaryRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListDictionaryRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListDictionaryRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListDictionaryRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListDictionaryRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListDictionaryRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id binary created_at updated_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Keyword != nil {

		if utf8.RuneCountInString(m.GetKeyword()) < 1 {
			err := ListDictionaryRequestValidationError{
				field:  "Keyword",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Binary != nil {

		if utf8.RuneCountInString(m.GetBinary()) < 1 {
			err := ListDictionaryRequestValidationError{
				field:  "Binary",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListDictionaryRequestMultiError(errors)
	}

	return nil
}

// ListDictionaryRequestMultiError is an error wrapping multiple validation
// errors returned by ListDictionaryRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDictionaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictionaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictionaryRequestMultiError) AllErrors() []error { return m }

// ListDictionaryRequestValidationError is the validation error returned by
// ListDictionaryRequest.Validate if the designated constraints aren't met.
type ListDictionaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictionaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictionaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictionaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictionaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictionaryRequestValidationError) ErrorName() string {
	return "ListDictionaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictionaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictionaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictionaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictionaryRequestValidationError{}

var _ListDictionaryRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListDictionaryRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"binary":     {},
	"created_at": {},
	"updated_at": {},
}

// Validate checks the field values on ListDictionaryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDictionaryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictionaryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictionaryReplyMultiError, or nil if none found.
func (m *ListDictionaryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictionaryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDictionaryReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDictionaryReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDictionaryReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDictionaryReplyMultiError(errors)
	}

	return nil
}

// ListDictionaryReplyMultiError is an error wrapping multiple validation
// errors returned by ListDictionaryReply.ValidateAll() if the designated
// constraints aren't met.
type ListDictionaryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictionaryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictionaryReplyMultiError) AllErrors() []error { return m }

// ListDictionaryReplyValidationError is the validation error returned by
// ListDictionaryReply.Validate if the designated constraints aren't met.
type ListDictionaryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictionaryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictionaryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictionaryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictionaryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictionaryReplyValidationError) ErrorName() string {
	return "ListDictionaryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictionaryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictionaryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictionaryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictionaryReplyValidationError{}

// Validate checks the field values on CreateDictionaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictionaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictionaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictionaryRequestMultiError, or nil if none found.
func (m *CreateDictionaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictionaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetUserId() < 1 {
		err := CreateDictionaryRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := CreateDictionaryRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBinary()) < 1 {
		err := CreateDictionaryRequestValidationError{
			field:  "Binary",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDictionaryRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDictionaryRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDictionaryRequestValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return CreateDictionaryRequestMultiError(errors)
	}

	return nil
}

// CreateDictionaryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDictionaryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDictionaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictionaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictionaryRequestMultiError) AllErrors() []error { return m }

// CreateDictionaryRequestValidationError is the validation error returned by
// CreateDictionaryRequest.Validate if the designated constraints aren't met.
type CreateDictionaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictionaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictionaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictionaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictionaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictionaryRequestValidationError) ErrorName() string {
	return "CreateDictionaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictionaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictionaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictionaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictionaryRequestValidationError{}

// Validate checks the field values on CreateDictionaryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictionaryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictionaryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictionaryReplyMultiError, or nil if none found.
func (m *CreateDictionaryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictionaryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDictionaryReplyMultiError(errors)
	}

	return nil
}

// CreateDictionaryReplyMultiError is an error wrapping multiple validation
// errors returned by CreateDictionaryReply.ValidateAll() if the designated
// constraints aren't met.
type CreateDictionaryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictionaryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictionaryReplyMultiError) AllErrors() []error { return m }

// CreateDictionaryReplyValidationError is the validation error returned by
// CreateDictionaryReply.Validate if the designated constraints aren't met.
type CreateDictionaryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictionaryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictionaryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictionaryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictionaryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictionaryReplyValidationError) ErrorName() string {
	return "CreateDictionaryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictionaryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictionaryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictionaryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictionaryReplyValidationError{}

// Validate checks the field values on UpdateDictionaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictionaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictionaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictionaryRequestMultiError, or nil if none found.
func (m *UpdateDictionaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictionaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetUpdateUserRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDictionaryRequestValidationError{
						field:  fmt.Sprintf("UpdateUserRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDictionaryRequestValidationError{
						field:  fmt.Sprintf("UpdateUserRequests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDictionaryRequestValidationError{
					field:  fmt.Sprintf("UpdateUserRequests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UserId != nil {

		if m.GetUserId() < 1 {
			err := UpdateDictionaryRequestValidationError{
				field:  "UserId",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Keyword != nil {

		if utf8.RuneCountInString(m.GetKeyword()) < 1 {
			err := UpdateDictionaryRequestValidationError{
				field:  "Keyword",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Binary != nil {

		if utf8.RuneCountInString(m.GetBinary()) < 1 {
			err := UpdateDictionaryRequestValidationError{
				field:  "Binary",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateDictionaryRequestMultiError(errors)
	}

	return nil
}

// UpdateDictionaryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDictionaryRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictionaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictionaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictionaryRequestMultiError) AllErrors() []error { return m }

// UpdateDictionaryRequestValidationError is the validation error returned by
// UpdateDictionaryRequest.Validate if the designated constraints aren't met.
type UpdateDictionaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictionaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictionaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictionaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictionaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictionaryRequestValidationError) ErrorName() string {
	return "UpdateDictionaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictionaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictionaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictionaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictionaryRequestValidationError{}

// Validate checks the field values on UpdateDictionaryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictionaryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictionaryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictionaryReplyMultiError, or nil if none found.
func (m *UpdateDictionaryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictionaryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDictionaryReplyMultiError(errors)
	}

	return nil
}

// UpdateDictionaryReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateDictionaryReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictionaryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictionaryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictionaryReplyMultiError) AllErrors() []error { return m }

// UpdateDictionaryReplyValidationError is the validation error returned by
// UpdateDictionaryReply.Validate if the designated constraints aren't met.
type UpdateDictionaryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictionaryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictionaryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictionaryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictionaryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictionaryReplyValidationError) ErrorName() string {
	return "UpdateDictionaryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictionaryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictionaryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictionaryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictionaryReplyValidationError{}

// Validate checks the field values on DeleteDictionaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictionaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictionaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictionaryRequestMultiError, or nil if none found.
func (m *DeleteDictionaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictionaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetIds()); l < 1 || l > 50 {
		err := DeleteDictionaryRequestValidationError{
			field:  "Ids",
			reason: "value must contain between 1 and 50 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_DeleteDictionaryRequest_Ids_Unique := make(map[uint32]struct{}, len(m.GetIds()))

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if _, exists := _DeleteDictionaryRequest_Ids_Unique[item]; exists {
			err := DeleteDictionaryRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_DeleteDictionaryRequest_Ids_Unique[item] = struct{}{}
		}

		// no validation rules for Ids[idx]
	}

	if len(errors) > 0 {
		return DeleteDictionaryRequestMultiError(errors)
	}

	return nil
}

// DeleteDictionaryRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDictionaryRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDictionaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictionaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictionaryRequestMultiError) AllErrors() []error { return m }

// DeleteDictionaryRequestValidationError is the validation error returned by
// DeleteDictionaryRequest.Validate if the designated constraints aren't met.
type DeleteDictionaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictionaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictionaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictionaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictionaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictionaryRequestValidationError) ErrorName() string {
	return "DeleteDictionaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictionaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictionaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictionaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictionaryRequestValidationError{}

// Validate checks the field values on DeleteDictionaryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictionaryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictionaryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictionaryReplyMultiError, or nil if none found.
func (m *DeleteDictionaryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictionaryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return DeleteDictionaryReplyMultiError(errors)
	}

	return nil
}

// DeleteDictionaryReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteDictionaryReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteDictionaryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictionaryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictionaryReplyMultiError) AllErrors() []error { return m }

// DeleteDictionaryReplyValidationError is the validation error returned by
// DeleteDictionaryReply.Validate if the designated constraints aren't met.
type DeleteDictionaryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictionaryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictionaryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictionaryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictionaryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictionaryReplyValidationError) ErrorName() string {
	return "DeleteDictionaryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictionaryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictionaryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictionaryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictionaryReplyValidationError{}

// Validate checks the field values on GetTrashDictionaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrashDictionaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrashDictionaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrashDictionaryRequestMultiError, or nil if none found.
func (m *GetTrashDictionaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrashDictionaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Params.(type) {
	case *GetTrashDictionaryRequest_Id:
		if v == nil {
			err := GetTrashDictionaryRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetId() < 1 {
			err := GetTrashDictionaryRequestValidationError{
				field:  "Id",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetTrashDictionaryRequest_BinaryAndKeyword_:
		if v == nil {
			err := GetTrashDictionaryRequestValidationError{
				field:  "Params",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBinaryAndKeyword()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTrashDictionaryRequestValidationError{
						field:  "BinaryAndKeyword",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTrashDictionaryRequestValidationError{
						field:  "BinaryAndKeyword",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBinaryAndKeyword()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTrashDictionaryRequestValidationError{
					field:  "BinaryAndKeyword",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetTrashDictionaryRequestMultiError(errors)
	}

	return nil
}

// GetTrashDictionaryRequestMultiError is an error wrapping multiple validation
// errors returned by GetTrashDictionaryRequest.ValidateAll() if the
// designated constraints aren't met.
type GetTrashDictionaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrashDictionaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrashDictionaryRequestMultiError) AllErrors() []error { return m }

// GetTrashDictionaryRequestValidationError is the validation error returned by
// GetTrashDictionaryRequest.Validate if the designated constraints aren't met.
type GetTrashDictionaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrashDictionaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrashDictionaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrashDictionaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrashDictionaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrashDictionaryRequestValidationError) ErrorName() string {
	return "GetTrashDictionaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrashDictionaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrashDictionaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrashDictionaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrashDictionaryRequestValidationError{}

// Validate checks the field values on GetTrashDictionaryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrashDictionaryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrashDictionaryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrashDictionaryReplyMultiError, or nil if none found.
func (m *GetTrashDictionaryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrashDictionaryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetUserId() < 1 {
		err := GetTrashDictionaryReplyValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := GetTrashDictionaryReplyValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBinary()) < 1 {
		err := GetTrashDictionaryReplyValidationError{
			field:  "Binary",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTrashDictionaryReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTrashDictionaryReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTrashDictionaryReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return GetTrashDictionaryReplyMultiError(errors)
	}

	return nil
}

// GetTrashDictionaryReplyMultiError is an error wrapping multiple validation
// errors returned by GetTrashDictionaryReply.ValidateAll() if the designated
// constraints aren't met.
type GetTrashDictionaryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrashDictionaryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrashDictionaryReplyMultiError) AllErrors() []error { return m }

// GetTrashDictionaryReplyValidationError is the validation error returned by
// GetTrashDictionaryReply.Validate if the designated constraints aren't met.
type GetTrashDictionaryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrashDictionaryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrashDictionaryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrashDictionaryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrashDictionaryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrashDictionaryReplyValidationError) ErrorName() string {
	return "GetTrashDictionaryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrashDictionaryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrashDictionaryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrashDictionaryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrashDictionaryReplyValidationError{}

// Validate checks the field values on ListTrashDictionaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTrashDictionaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTrashDictionaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTrashDictionaryRequestMultiError, or nil if none found.
func (m *ListTrashDictionaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTrashDictionaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListTrashDictionaryRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListTrashDictionaryRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListTrashDictionaryRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListTrashDictionaryRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListTrashDictionaryRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListTrashDictionaryRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id binary created_at updated_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Keyword != nil {

		if utf8.RuneCountInString(m.GetKeyword()) < 1 {
			err := ListTrashDictionaryRequestValidationError{
				field:  "Keyword",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Binary != nil {

		if utf8.RuneCountInString(m.GetBinary()) < 1 {
			err := ListTrashDictionaryRequestValidationError{
				field:  "Binary",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListTrashDictionaryRequestMultiError(errors)
	}

	return nil
}

// ListTrashDictionaryRequestMultiError is an error wrapping multiple
// validation errors returned by ListTrashDictionaryRequest.ValidateAll() if
// the designated constraints aren't met.
type ListTrashDictionaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTrashDictionaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTrashDictionaryRequestMultiError) AllErrors() []error { return m }

// ListTrashDictionaryRequestValidationError is the validation error returned
// by ListTrashDictionaryRequest.Validate if the designated constraints aren't met.
type ListTrashDictionaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTrashDictionaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTrashDictionaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTrashDictionaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTrashDictionaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTrashDictionaryRequestValidationError) ErrorName() string {
	return "ListTrashDictionaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTrashDictionaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTrashDictionaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTrashDictionaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTrashDictionaryRequestValidationError{}

var _ListTrashDictionaryRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListTrashDictionaryRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"binary":     {},
	"created_at": {},
	"updated_at": {},
}

// Validate checks the field values on ListTrashDictionaryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTrashDictionaryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTrashDictionaryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTrashDictionaryReplyMultiError, or nil if none found.
func (m *ListTrashDictionaryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTrashDictionaryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTrashDictionaryReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTrashDictionaryReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTrashDictionaryReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTrashDictionaryReplyMultiError(errors)
	}

	return nil
}

// ListTrashDictionaryReplyMultiError is an error wrapping multiple validation
// errors returned by ListTrashDictionaryReply.ValidateAll() if the designated
// constraints aren't met.
type ListTrashDictionaryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTrashDictionaryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTrashDictionaryReplyMultiError) AllErrors() []error { return m }

// ListTrashDictionaryReplyValidationError is the validation error returned by
// ListTrashDictionaryReply.Validate if the designated constraints aren't met.
type ListTrashDictionaryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTrashDictionaryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTrashDictionaryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTrashDictionaryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTrashDictionaryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTrashDictionaryReplyValidationError) ErrorName() string {
	return "ListTrashDictionaryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTrashDictionaryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTrashDictionaryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTrashDictionaryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTrashDictionaryReplyValidationError{}

// Validate checks the field values on DeleteTrashDictionaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTrashDictionaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTrashDictionaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTrashDictionaryRequestMultiError, or nil if none found.
func (m *DeleteTrashDictionaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTrashDictionaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetIds()); l < 1 || l > 50 {
		err := DeleteTrashDictionaryRequestValidationError{
			field:  "Ids",
			reason: "value must contain between 1 and 50 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_DeleteTrashDictionaryRequest_Ids_Unique := make(map[uint32]struct{}, len(m.GetIds()))

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if _, exists := _DeleteTrashDictionaryRequest_Ids_Unique[item]; exists {
			err := DeleteTrashDictionaryRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_DeleteTrashDictionaryRequest_Ids_Unique[item] = struct{}{}
		}

		// no validation rules for Ids[idx]
	}

	if len(errors) > 0 {
		return DeleteTrashDictionaryRequestMultiError(errors)
	}

	return nil
}

// DeleteTrashDictionaryRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteTrashDictionaryRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteTrashDictionaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTrashDictionaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTrashDictionaryRequestMultiError) AllErrors() []error { return m }

// DeleteTrashDictionaryRequestValidationError is the validation error returned
// by DeleteTrashDictionaryRequest.Validate if the designated constraints
// aren't met.
type DeleteTrashDictionaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTrashDictionaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTrashDictionaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTrashDictionaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTrashDictionaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTrashDictionaryRequestValidationError) ErrorName() string {
	return "DeleteTrashDictionaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTrashDictionaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTrashDictionaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTrashDictionaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTrashDictionaryRequestValidationError{}

// Validate checks the field values on DeleteTrashDictionaryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTrashDictionaryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTrashDictionaryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTrashDictionaryReplyMultiError, or nil if none found.
func (m *DeleteTrashDictionaryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTrashDictionaryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return DeleteTrashDictionaryReplyMultiError(errors)
	}

	return nil
}

// DeleteTrashDictionaryReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteTrashDictionaryReply.ValidateAll() if
// the designated constraints aren't met.
type DeleteTrashDictionaryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTrashDictionaryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTrashDictionaryReplyMultiError) AllErrors() []error { return m }

// DeleteTrashDictionaryReplyValidationError is the validation error returned
// by DeleteTrashDictionaryReply.Validate if the designated constraints aren't met.
type DeleteTrashDictionaryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTrashDictionaryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTrashDictionaryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTrashDictionaryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTrashDictionaryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTrashDictionaryReplyValidationError) ErrorName() string {
	return "DeleteTrashDictionaryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTrashDictionaryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTrashDictionaryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTrashDictionaryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTrashDictionaryReplyValidationError{}

// Validate checks the field values on RevertTrashDictionaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevertTrashDictionaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevertTrashDictionaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevertTrashDictionaryRequestMultiError, or nil if none found.
func (m *RevertTrashDictionaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevertTrashDictionaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := RevertTrashDictionaryRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RevertTrashDictionaryRequestMultiError(errors)
	}

	return nil
}

// RevertTrashDictionaryRequestMultiError is an error wrapping multiple
// validation errors returned by RevertTrashDictionaryRequest.ValidateAll() if
// the designated constraints aren't met.
type RevertTrashDictionaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevertTrashDictionaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevertTrashDictionaryRequestMultiError) AllErrors() []error { return m }

// RevertTrashDictionaryRequestValidationError is the validation error returned
// by RevertTrashDictionaryRequest.Validate if the designated constraints
// aren't met.
type RevertTrashDictionaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevertTrashDictionaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevertTrashDictionaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevertTrashDictionaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevertTrashDictionaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevertTrashDictionaryRequestValidationError) ErrorName() string {
	return "RevertTrashDictionaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevertTrashDictionaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevertTrashDictionaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevertTrashDictionaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevertTrashDictionaryRequestValidationError{}

// Validate checks the field values on RevertTrashDictionaryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevertTrashDictionaryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevertTrashDictionaryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevertTrashDictionaryReplyMultiError, or nil if none found.
func (m *RevertTrashDictionaryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RevertTrashDictionaryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RevertTrashDictionaryReplyMultiError(errors)
	}

	return nil
}

// RevertTrashDictionaryReplyMultiError is an error wrapping multiple
// validation errors returned by RevertTrashDictionaryReply.ValidateAll() if
// the designated constraints aren't met.
type RevertTrashDictionaryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevertTrashDictionaryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevertTrashDictionaryReplyMultiError) AllErrors() []error { return m }

// RevertTrashDictionaryReplyValidationError is the validation error returned
// by RevertTrashDictionaryReply.Validate if the designated constraints aren't met.
type RevertTrashDictionaryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevertTrashDictionaryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevertTrashDictionaryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevertTrashDictionaryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevertTrashDictionaryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevertTrashDictionaryReplyValidationError) ErrorName() string {
	return "RevertTrashDictionaryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RevertTrashDictionaryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevertTrashDictionaryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevertTrashDictionaryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevertTrashDictionaryReplyValidationError{}

// Validate checks the field values on GetDictionaryRequest_BinaryAndKeyword
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetDictionaryRequest_BinaryAndKeyword) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictionaryRequest_BinaryAndKeyword
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDictionaryRequest_BinaryAndKeywordMultiError, or nil if none found.
func (m *GetDictionaryRequest_BinaryAndKeyword) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictionaryRequest_BinaryAndKeyword) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetBinary()) < 1 {
		err := GetDictionaryRequest_BinaryAndKeywordValidationError{
			field:  "Binary",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := GetDictionaryRequest_BinaryAndKeywordValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDictionaryRequest_BinaryAndKeywordMultiError(errors)
	}

	return nil
}

// GetDictionaryRequest_BinaryAndKeywordMultiError is an error wrapping
// multiple validation errors returned by
// GetDictionaryRequest_BinaryAndKeyword.ValidateAll() if the designated
// constraints aren't met.
type GetDictionaryRequest_BinaryAndKeywordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictionaryRequest_BinaryAndKeywordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictionaryRequest_BinaryAndKeywordMultiError) AllErrors() []error { return m }

// GetDictionaryRequest_BinaryAndKeywordValidationError is the validation error
// returned by GetDictionaryRequest_BinaryAndKeyword.Validate if the
// designated constraints aren't met.
type GetDictionaryRequest_BinaryAndKeywordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictionaryRequest_BinaryAndKeywordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictionaryRequest_BinaryAndKeywordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictionaryRequest_BinaryAndKeywordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictionaryRequest_BinaryAndKeywordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictionaryRequest_BinaryAndKeywordValidationError) ErrorName() string {
	return "GetDictionaryRequest_BinaryAndKeywordValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictionaryRequest_BinaryAndKeywordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictionaryRequest_BinaryAndKeyword.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictionaryRequest_BinaryAndKeywordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictionaryRequest_BinaryAndKeywordValidationError{}

// Validate checks the field values on GetDictionaryReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDictionaryReply_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictionaryReply_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictionaryReply_UserMultiError, or nil if none found.
func (m *GetDictionaryReply_User) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictionaryReply_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GetDictionaryReply_UserMultiError(errors)
	}

	return nil
}

// GetDictionaryReply_UserMultiError is an error wrapping multiple validation
// errors returned by GetDictionaryReply_User.ValidateAll() if the designated
// constraints aren't met.
type GetDictionaryReply_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictionaryReply_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictionaryReply_UserMultiError) AllErrors() []error { return m }

// GetDictionaryReply_UserValidationError is the validation error returned by
// GetDictionaryReply_User.Validate if the designated constraints aren't met.
type GetDictionaryReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictionaryReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictionaryReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictionaryReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictionaryReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictionaryReply_UserValidationError) ErrorName() string {
	return "GetDictionaryReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictionaryReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictionaryReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictionaryReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictionaryReply_UserValidationError{}

// Validate checks the field values on ListDictionaryReply_Dictionary with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDictionaryReply_Dictionary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictionaryReply_Dictionary with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDictionaryReply_DictionaryMultiError, or nil if none found.
func (m *ListDictionaryReply_Dictionary) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictionaryReply_Dictionary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetUserId() < 1 {
		err := ListDictionaryReply_DictionaryValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := ListDictionaryReply_DictionaryValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBinary()) < 1 {
		err := ListDictionaryReply_DictionaryValidationError{
			field:  "Binary",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDictionaryReply_DictionaryValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDictionaryReply_DictionaryValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDictionaryReply_DictionaryValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return ListDictionaryReply_DictionaryMultiError(errors)
	}

	return nil
}

// ListDictionaryReply_DictionaryMultiError is an error wrapping multiple
// validation errors returned by ListDictionaryReply_Dictionary.ValidateAll()
// if the designated constraints aren't met.
type ListDictionaryReply_DictionaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictionaryReply_DictionaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictionaryReply_DictionaryMultiError) AllErrors() []error { return m }

// ListDictionaryReply_DictionaryValidationError is the validation error
// returned by ListDictionaryReply_Dictionary.Validate if the designated
// constraints aren't met.
type ListDictionaryReply_DictionaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictionaryReply_DictionaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictionaryReply_DictionaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictionaryReply_DictionaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictionaryReply_DictionaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictionaryReply_DictionaryValidationError) ErrorName() string {
	return "ListDictionaryReply_DictionaryValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictionaryReply_DictionaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictionaryReply_Dictionary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictionaryReply_DictionaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictionaryReply_DictionaryValidationError{}

// Validate checks the field values on ListDictionaryReply_Dictionary_User with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListDictionaryReply_Dictionary_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictionaryReply_Dictionary_User
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListDictionaryReply_Dictionary_UserMultiError, or nil if none found.
func (m *ListDictionaryReply_Dictionary_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictionaryReply_Dictionary_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListDictionaryReply_Dictionary_UserMultiError(errors)
	}

	return nil
}

// ListDictionaryReply_Dictionary_UserMultiError is an error wrapping multiple
// validation errors returned by
// ListDictionaryReply_Dictionary_User.ValidateAll() if the designated
// constraints aren't met.
type ListDictionaryReply_Dictionary_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictionaryReply_Dictionary_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictionaryReply_Dictionary_UserMultiError) AllErrors() []error { return m }

// ListDictionaryReply_Dictionary_UserValidationError is the validation error
// returned by ListDictionaryReply_Dictionary_User.Validate if the designated
// constraints aren't met.
type ListDictionaryReply_Dictionary_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictionaryReply_Dictionary_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictionaryReply_Dictionary_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictionaryReply_Dictionary_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictionaryReply_Dictionary_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictionaryReply_Dictionary_UserValidationError) ErrorName() string {
	return "ListDictionaryReply_Dictionary_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictionaryReply_Dictionary_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictionaryReply_Dictionary_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictionaryReply_Dictionary_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictionaryReply_Dictionary_UserValidationError{}

// Validate checks the field values on CreateDictionaryRequest_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictionaryRequest_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictionaryRequest_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictionaryRequest_UserMultiError, or nil if none found.
func (m *CreateDictionaryRequest_User) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictionaryRequest_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateDictionaryRequest_UserMultiError(errors)
	}

	return nil
}

// CreateDictionaryRequest_UserMultiError is an error wrapping multiple
// validation errors returned by CreateDictionaryRequest_User.ValidateAll() if
// the designated constraints aren't met.
type CreateDictionaryRequest_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictionaryRequest_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictionaryRequest_UserMultiError) AllErrors() []error { return m }

// CreateDictionaryRequest_UserValidationError is the validation error returned
// by CreateDictionaryRequest_User.Validate if the designated constraints
// aren't met.
type CreateDictionaryRequest_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictionaryRequest_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictionaryRequest_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictionaryRequest_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictionaryRequest_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictionaryRequest_UserValidationError) ErrorName() string {
	return "CreateDictionaryRequest_UserValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictionaryRequest_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictionaryRequest_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictionaryRequest_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictionaryRequest_UserValidationError{}

// Validate checks the field values on
// UpdateDictionaryRequest_UpdateUserRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateDictionaryRequest_UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateDictionaryRequest_UpdateUserRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateDictionaryRequest_UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateDictionaryRequest_UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictionaryRequest_UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return UpdateDictionaryRequest_UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateDictionaryRequest_UpdateUserRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateDictionaryRequest_UpdateUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictionaryRequest_UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictionaryRequest_UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictionaryRequest_UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateDictionaryRequest_UpdateUserRequestValidationError is the validation
// error returned by UpdateDictionaryRequest_UpdateUserRequest.Validate if the
// designated constraints aren't met.
type UpdateDictionaryRequest_UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictionaryRequest_UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictionaryRequest_UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictionaryRequest_UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictionaryRequest_UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictionaryRequest_UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateDictionaryRequest_UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictionaryRequest_UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictionaryRequest_UpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictionaryRequest_UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictionaryRequest_UpdateUserRequestValidationError{}

// Validate checks the field values on
// GetTrashDictionaryRequest_BinaryAndKeyword with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTrashDictionaryRequest_BinaryAndKeyword) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetTrashDictionaryRequest_BinaryAndKeyword with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetTrashDictionaryRequest_BinaryAndKeywordMultiError, or nil if none found.
func (m *GetTrashDictionaryRequest_BinaryAndKeyword) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrashDictionaryRequest_BinaryAndKeyword) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetBinary()) < 1 {
		err := GetTrashDictionaryRequest_BinaryAndKeywordValidationError{
			field:  "Binary",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := GetTrashDictionaryRequest_BinaryAndKeywordValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTrashDictionaryRequest_BinaryAndKeywordMultiError(errors)
	}

	return nil
}

// GetTrashDictionaryRequest_BinaryAndKeywordMultiError is an error wrapping
// multiple validation errors returned by
// GetTrashDictionaryRequest_BinaryAndKeyword.ValidateAll() if the designated
// constraints aren't met.
type GetTrashDictionaryRequest_BinaryAndKeywordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrashDictionaryRequest_BinaryAndKeywordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrashDictionaryRequest_BinaryAndKeywordMultiError) AllErrors() []error { return m }

// GetTrashDictionaryRequest_BinaryAndKeywordValidationError is the validation
// error returned by GetTrashDictionaryRequest_BinaryAndKeyword.Validate if
// the designated constraints aren't met.
type GetTrashDictionaryRequest_BinaryAndKeywordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrashDictionaryRequest_BinaryAndKeywordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrashDictionaryRequest_BinaryAndKeywordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrashDictionaryRequest_BinaryAndKeywordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrashDictionaryRequest_BinaryAndKeywordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrashDictionaryRequest_BinaryAndKeywordValidationError) ErrorName() string {
	return "GetTrashDictionaryRequest_BinaryAndKeywordValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrashDictionaryRequest_BinaryAndKeywordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrashDictionaryRequest_BinaryAndKeyword.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrashDictionaryRequest_BinaryAndKeywordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrashDictionaryRequest_BinaryAndKeywordValidationError{}

// Validate checks the field values on GetTrashDictionaryReply_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrashDictionaryReply_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrashDictionaryReply_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrashDictionaryReply_UserMultiError, or nil if none found.
func (m *GetTrashDictionaryReply_User) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrashDictionaryReply_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GetTrashDictionaryReply_UserMultiError(errors)
	}

	return nil
}

// GetTrashDictionaryReply_UserMultiError is an error wrapping multiple
// validation errors returned by GetTrashDictionaryReply_User.ValidateAll() if
// the designated constraints aren't met.
type GetTrashDictionaryReply_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrashDictionaryReply_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrashDictionaryReply_UserMultiError) AllErrors() []error { return m }

// GetTrashDictionaryReply_UserValidationError is the validation error returned
// by GetTrashDictionaryReply_User.Validate if the designated constraints
// aren't met.
type GetTrashDictionaryReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrashDictionaryReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrashDictionaryReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrashDictionaryReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrashDictionaryReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrashDictionaryReply_UserValidationError) ErrorName() string {
	return "GetTrashDictionaryReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrashDictionaryReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrashDictionaryReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrashDictionaryReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrashDictionaryReply_UserValidationError{}

// Validate checks the field values on ListTrashDictionaryReply_Dictionary with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTrashDictionaryReply_Dictionary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTrashDictionaryReply_Dictionary
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTrashDictionaryReply_DictionaryMultiError, or nil if none found.
func (m *ListTrashDictionaryReply_Dictionary) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTrashDictionaryReply_Dictionary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetUserId() < 1 {
		err := ListTrashDictionaryReply_DictionaryValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := ListTrashDictionaryReply_DictionaryValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBinary()) < 1 {
		err := ListTrashDictionaryReply_DictionaryValidationError{
			field:  "Binary",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTrashDictionaryReply_DictionaryValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTrashDictionaryReply_DictionaryValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTrashDictionaryReply_DictionaryValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return ListTrashDictionaryReply_DictionaryMultiError(errors)
	}

	return nil
}

// ListTrashDictionaryReply_DictionaryMultiError is an error wrapping multiple
// validation errors returned by
// ListTrashDictionaryReply_Dictionary.ValidateAll() if the designated
// constraints aren't met.
type ListTrashDictionaryReply_DictionaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTrashDictionaryReply_DictionaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTrashDictionaryReply_DictionaryMultiError) AllErrors() []error { return m }

// ListTrashDictionaryReply_DictionaryValidationError is the validation error
// returned by ListTrashDictionaryReply_Dictionary.Validate if the designated
// constraints aren't met.
type ListTrashDictionaryReply_DictionaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTrashDictionaryReply_DictionaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTrashDictionaryReply_DictionaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTrashDictionaryReply_DictionaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTrashDictionaryReply_DictionaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTrashDictionaryReply_DictionaryValidationError) ErrorName() string {
	return "ListTrashDictionaryReply_DictionaryValidationError"
}

// Error satisfies the builtin error interface
func (e ListTrashDictionaryReply_DictionaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTrashDictionaryReply_Dictionary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTrashDictionaryReply_DictionaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTrashDictionaryReply_DictionaryValidationError{}

// Validate checks the field values on ListTrashDictionaryReply_Dictionary_User
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListTrashDictionaryReply_Dictionary_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListTrashDictionaryReply_Dictionary_User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListTrashDictionaryReply_Dictionary_UserMultiError, or nil if none found.
func (m *ListTrashDictionaryReply_Dictionary_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTrashDictionaryReply_Dictionary_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListTrashDictionaryReply_Dictionary_UserMultiError(errors)
	}

	return nil
}

// ListTrashDictionaryReply_Dictionary_UserMultiError is an error wrapping
// multiple validation errors returned by
// ListTrashDictionaryReply_Dictionary_User.ValidateAll() if the designated
// constraints aren't met.
type ListTrashDictionaryReply_Dictionary_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTrashDictionaryReply_Dictionary_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTrashDictionaryReply_Dictionary_UserMultiError) AllErrors() []error { return m }

// ListTrashDictionaryReply_Dictionary_UserValidationError is the validation
// error returned by ListTrashDictionaryReply_Dictionary_User.Validate if the
// designated constraints aren't met.
type ListTrashDictionaryReply_Dictionary_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTrashDictionaryReply_Dictionary_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTrashDictionaryReply_Dictionary_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTrashDictionaryReply_Dictionary_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTrashDictionaryReply_Dictionary_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTrashDictionaryReply_Dictionary_UserValidationError) ErrorName() string {
	return "ListTrashDictionaryReply_Dictionary_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListTrashDictionaryReply_Dictionary_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTrashDictionaryReply_Dictionary_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTrashDictionaryReply_Dictionary_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTrashDictionaryReply_Dictionary_UserValidationError{}
